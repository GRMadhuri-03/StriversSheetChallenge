class Solution {
public:
   // Better ==> O(NlogN);;
    // int longestConsecutive(vector<int>& nums) {
    //   if(nums.size()==0 || nums.size()==1){
    //       return nums.size();
    //   }
    //   sort(nums.begin(),nums.end());
    //   int currcnt=0,lastsmallest=INT_MIN;
    //   int longest=1;
    //   for(int i=0;i<nums.size();i++){
    //      if(nums[i]-1==lastsmallest){
    //          currcnt++;
    //          lastsmallest=nums[i];
    //      }else if(nums[i]!=lastsmallest){
    //          currcnt=1;
    //          lastsmallest=nums[i];
    //      }
    //      longest=max(longest,currcnt);
    //   }
    //    return longest;
    // }
    int longestConsecutive(vector<int>& nums) {
       int n=nums.size();
       if(n==0 || n==1){
           return n;
       }
       int longest=1;
       unordered_set<int>s;
       for(auto x:nums){
           s.insert(x);
       } 
       for(auto x:s){
          if(s.find(x-1)==s.end()){
              int cnt=1;
              int p=x;
              while(s.find(p+1)!=s.end()){
                  cnt++;
                  p=p+1;
              }
              longest=max(longest,cnt);
          }
       }
       return longest;
    }
    // TC:O(3N);;
    // SC:O(N);;
};
